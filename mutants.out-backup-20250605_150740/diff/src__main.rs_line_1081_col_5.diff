--- src/main.rs
+++ replace prepare_event_row -> EventTableRow with Default::default()
@@ -1073,103 +1073,17 @@
         );
     }
     
     println!("{}", "─".repeat(total_width).dimmed());
 }
 
 /// Prepare a single event row for table display
 fn prepare_event_row(event: &ZwiftEvent, zwift_score: u32) -> EventTableRow {
-    let local_time: DateTime<Local> = event.event_start.into();
-    let time_str = local_time.format("%H:%M").to_string();
-    
-    // Get route data and calculate total distance and elevation
-    let (distance_str, elevation_str, duration_str) = if let Some(route_id) = event.route_id {
-        if let Some(route_data) = get_route_data(route_id) {
-            // Calculate total distance including lead-in
-            let user_subgroup = find_user_subgroup(event, zwift_score);
-            let distance_meters = user_subgroup
-                .and_then(|sg| sg.distance_in_meters)
-                .or(event.distance_in_meters);
-            
-            let mut actual_distance_km = route_data.distance_km;
-            let mut lap_count = 1;
-            
-            // Calculate actual distance including laps
-            if let Some(sg) = user_subgroup {
-                if let Some(laps) = sg.laps {
-                    lap_count = laps;
-                    actual_distance_km = route_data.distance_km * laps as f64;
-                } else if let Some(dist_m) = sg.distance_in_meters.filter(|&d| d > 0.0) {
-                    actual_distance_km = dist_m / 1000.0;
-                    lap_count = (actual_distance_km / route_data.distance_km).round() as u32;
-                }
-            } else if let Some(dist_m) = distance_meters.filter(|&d| d > 0.0) {
-                actual_distance_km = dist_m / 1000.0;
-                lap_count = (actual_distance_km / route_data.distance_km).round() as u32;
-            }
-            
-            // Total distance including lead-in (no lap indicator)
-            let total_distance = actual_distance_km + route_data.lead_in_distance_km;
-            let distance_str = format!("{:.1} km", total_distance);
-            
-            // Calculate total elevation (multiply by laps if multi-lap)
-            let total_elevation = route_data.elevation_m * lap_count;
-            let elevation_str = format!("{}m", total_elevation);
-            
-            // Calculate duration
-            let category = get_category_from_score(zwift_score);
-            let effective_speed = get_category_speed(category);
-            
-            let difficulty_multiplier = get_route_difficulty_multiplier_from_elevation(
-                route_data.distance_km,
-                route_data.elevation_m
-            );
-            
-            let surface_multiplier = match route_data.surface {
-                "road" => 1.0,
-                "gravel" => 0.85,
-                "mixed" => 0.92,
-                _ => 1.0,
-            };
-            
-            let adjusted_speed = effective_speed * difficulty_multiplier * surface_multiplier;
-            let estimated_duration = ((total_distance / adjusted_speed) * 60.0) as u32;
-            
-            (distance_str, elevation_str, format_duration(estimated_duration))
-        } else {
-            // Unknown route
-            if let Some(dist_m) = event.distance_in_meters.filter(|&d| d > 0.0) {
-                let distance_km = dist_m / 1000.0;
-                let route_name = event.route.as_deref().unwrap_or(&event.name);
-                let estimated_duration = estimate_duration_for_category(distance_km, route_name, zwift_score);
-                (format!("{:.1} km", distance_km), "?m".to_string(), format_duration(estimated_duration))
-            } else {
-                ("? km".to_string(), "?m".to_string(), "? min".to_string())
-            }
-        }
-    } else {
-        // No route ID
-        if let Some(dist_m) = event.distance_in_meters.filter(|&d| d > 0.0) {
-            let distance_km = dist_m / 1000.0;
-            let route_name = event.route.as_deref().unwrap_or(&event.name);
-            let estimated_duration = estimate_duration_for_category(distance_km, route_name, zwift_score);
-            (format!("{:.1} km", distance_km), "?m".to_string(), format_duration(estimated_duration))
-        } else {
-            ("? km".to_string(), "?m".to_string(), "? min".to_string())
-        }
-    };
-    
-    EventTableRow {
-        name: event.name.clone(),
-        time: time_str,
-        distance: distance_str,
-        elevation: elevation_str,
-        duration: duration_str,
-    }
+    Default::default() /* ~ changed by cargo-mutants ~ */
 }
 
 fn print_event(event: &ZwiftEvent, _args: &Args, zwift_score: u32) {
     let local_time: DateTime<Local> = event.event_start.into();
 
     println!("\n{}", "─".repeat(80).dimmed());
     println!("{}: {}", "Event".bright_blue(), event.name.bold());
     println!(
