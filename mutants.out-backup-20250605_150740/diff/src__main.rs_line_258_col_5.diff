--- src/main.rs
+++ replace count_events_by_type -> Vec<(String, usize)> with vec![(String::new(), 1)]
@@ -250,26 +250,17 @@
     event.event_sub_groups.iter().find(|sg| {
         sg.name.contains(user_category) || 
         (user_category == "D" && sg.name.contains("E"))
     })
 }
 
 // Count events by type for display
 fn count_events_by_type(events: &[ZwiftEvent]) -> Vec<(String, usize)> {
-    let mut event_counts = std::collections::HashMap::new();
-    for event in events {
-        if event.sport.to_uppercase() == "CYCLING" {
-            *event_counts.entry(event.event_type.clone()).or_insert(0) += 1;
-        }
-    }
-    
-    let mut counts: Vec<_> = event_counts.into_iter().collect();
-    counts.sort_by_key(|(_, count)| std::cmp::Reverse(*count));
-    counts
+    vec![(String::new(), 1)] /* ~ changed by cargo-mutants ~ */
 }
 
 // Format event type for display
 fn format_event_type(event_type: &str, count: usize) -> String {
     let readable_type = match event_type.to_lowercase().as_str() {
         "race" => "races",
         "time_trial" => "time trials",
         "group_ride" => "group rides",
