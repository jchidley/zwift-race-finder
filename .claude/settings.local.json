{
  "permissions": {
    "allow": [
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:docs.astral.sh)",
      "Bash(hx:*)",
      "Bash(cargo install:*)",
      "Bash(wget:*)",
      "Bash(tar:*)",
      "WebFetch(domain:www.chezmoi.io)",
      "Bash(chezmoi:*)",
      "WebFetch(domain:docs.helix-editor.com)",
      "Bash(hx:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(echo $COLORTERM)",
      "Bash(echo $TERM)",
      "Bash(chezmoi apply:*)",
      "Bash(chezmoi apply:*)",
      "Bash(hx:*)",
      "Bash(printf:*)",
      "Bash(ln:*)",
      "Bash(mkdir:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:docs.helix-editor.com)",
      "Bash(cargo install:*)",
      "Bash(ls:*)",
      "Bash(chezmoi apply:*)",
      "WebFetch(domain:chezmoi.io)",
      "WebFetch(domain:docs.microsoft.com)",
      "WebFetch(domain:scoop.sh)",
      "WebFetch(domain:chocolatey.org)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(cp:*)",
      "Bash(pdftotext:*)",
      "Bash(playwright:*)",
      "WebFetch(domain:zwifthacks.com)",
      "Bash(./scrape_zwiftpower.sh:*)",
      "Bash(./export_zwiftpower_logged_in.sh:*)",
      "Bash(~/tools/rust/zwift-race-finder/export_zwiftpower_logged_in.sh import:*)",
      "Bash(jq:*)",
      "Bash(chmod:*)",
      "Bash(sqlite3:*)",
      "Bash(cargo run:*)",
      "Bash(/home/jack/tools/rust/zwift-race-finder/fix_unknown_routes.sh:*)",
      "Bash(/home/jack/tools/rust/zwift-race-finder/route_research.sh:*)",
      "Bash(/home/jack/tools/rust/zwift-race-finder/apply_mappings.sh:*)",
      "Bash(cargo test:*)",
      "Bash(mv:*)",
      "Bash(apt search:*)",
      "Bash(bw:*)",
      "Bash(cargo test:*)",
      "Bash(./analyze_speeds.sh:*)",
      "Bash(timeout:*)",
      "Bash(./import_zwiftpower_dev.sh:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(python:*)",
      "Bash(uv run:*)",
      "Bash(./strava_auth.sh:*)",
      "Bash(./strava_fetch_activities.sh:*)",
      "Bash(./strava_import_to_db.sh:*)",
      "Bash(cargo:*)",
      "Bash(./update_rider_stats.sh:*)",
      "Bash(git reset:*)",
      "Bash(awk:*)",
      "Bash(./zwift-race-finder:*)",
      "WebFetch(domain:github.com)",
      "Bash(git init:*)",
      "Bash(./install.sh:*)",
      "Bash(zwift-race-finder:*)",
      "Bash(./test_api_limits.sh:*)",
      "Bash(touch:*)",
      "Bash(rustc:*)",
      "Bash(rm:*)",
      "Bash(./fetch_event_descriptions.sh:*)",
      "Bash(./apply_route_mappings.sh:*)",
      "Bash(echo:*)",
      "Bash(git checkout:*)",
      "Bash(./target/release/zwift-race-finder --debug -d 30 -t 20)",
      "Bash(./target/release/zwift-race-finder:*)",
      "Bash(true)",
      "Bash(git log:*)",
      "Bash(./debug_stage4.sh:*)",
      "Bash(bash:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(host api.zwift.com)",
      "Bash(curl:*)",
      "Bash(./debug_epic_race.sh:*)",
      "Bash(./debug_event_tags.sh:*)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- -d 30 -t 30 --tags ranked 2 > /dev/null)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- -d 30 -t 30 --exclude-tags \"zracing\" 2 > /dev/null)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- --from-url \"tags=ranked&duration=30&tolerance=15\" 2 > /dev/null)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- --show-progress 2>/dev/null)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- --mark-complete 3765339356 2>/dev/null)",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -q -- -d 30 -t 30 --new-routes-only 2 > /dev/null)",
      "Bash(git clone:*)",
      "Bash(/req add \"Route Data Enhancement from External Sources\" \"Import complete route data from zwift-data npm package (MIT licensed) including route IDs, slugs, names, distances, elevation, lead-in distances, surface types, and external URLs. Consider zwiftmap.com architecture patterns for visualization.\")",
      "Bash(RUST_LOG=error cargo run --bin zwift-race-finder -- --duration 30 --tolerance 10 --debug 2 > /dev/null)",
      "WebFetch(domain:whatsonzwift.com)",
      "Bash(./fetch_whatsonzwift_route_data.sh:*)",
      "Bash(git restore:*)",
      "Bash(git mv:*)",
      "WebFetch(domain:support.zwift.com)",
      "WebFetch(domain:www.zwift.com)",
      "Bash(# Check for missing functions\nmissing_functions=\"\"\nfor func in default_sport is_racing_score_event parse_description_data parse_distance_from_description get_route_data_from_db get_route_data parse_lap_count find_user_subgroup count_events_by_type format_event_type generate_no_results_suggestions parse_distance_from_name estimate_distance_from_name get_route_difficulty_multiplier_from_elevation get_route_difficulty_multiplier estimate_duration_from_route_id estimate_duration_with_distance estimate_duration_for_category get_cache_file generate_filter_description fetch_zwiftpower_stats fetch_zwiftpower_public load_cached_stats save_cached_stats get_user_stats fetch_events filter_events format_duration display_filter_stats log_unknown_route print_events_table prepare_event_row print_event; do\n    if ! grep -q \"fn $func\" /home/jack/tools/rust/zwift-race-finder/src/*.rs 2>/dev/null; then\n        missing_functions=\"$missing_functions $func\"\n    fi\ndone\n\necho \"Missing functions: $missing_functions\")",
      "Bash(# Compare is_racing_score_event implementation\necho \"=== main_backup.rs ===\"\ngrep -A 5 \"fn is_racing_score_event\" /home/jack/tools/rust/zwift-race-finder/src/main_backup.rs\necho -e \"\\n=== zwift_api.rs ===\"\ngrep -A 5 \"fn is_racing_score_event\" /home/jack/tools/rust/zwift-race-finder/src/zwift_api.rs)",
      "Bash(# Compare parse_distance_from_description\necho \"=== main_backup.rs ===\"\ngrep -A 20 \"fn parse_distance_from_description\" /home/jack/tools/rust/zwift-race-finder/src/main_backup.rs | head -25\necho -e \"\\n=== route_data.rs ===\"\ngrep -A 20 \"fn parse_distance_from_description\" /home/jack/tools/rust/zwift-race-finder/src/route_data.rs | head -25)",
      "Bash(# Compare find_user_subgroup\necho \"=== main_backup.rs ===\"\ngrep -A 20 \"fn find_user_subgroup\" /home/jack/tools/rust/zwift-race-finder/src/main_backup.rs\necho -e \"\\n=== duration_estimation.rs ===\"\ngrep -A 20 \"fn find_user_subgroup\" /home/jack/tools/rust/zwift-race-finder/src/duration_estimation.rs)",
      "Bash(# Compare get_route_difficulty_multiplier_from_elevation\necho \"=== main_backup.rs ===\"\ngrep -A 15 \"fn get_route_difficulty_multiplier_from_elevation\" /home/jack/tools/rust/zwift-race-finder/src/main_backup.rs\necho -e \"\\n=== duration_estimation.rs ===\"\ngrep -A 15 \"fn get_route_difficulty_multiplier_from_elevation\" /home/jack/tools/rust/zwift-race-finder/src/duration_estimation.rs)",
      "Bash(# Compare estimate_duration_for_category\necho \"=== main_backup.rs ===\"\ngrep -A 15 \"fn estimate_duration_for_category\" /home/jack/tools/rust/zwift-race-finder/src/main_backup.rs\necho -e \"\\n=== Check if it exists in new structure ===\"\ngrep -r \"fn estimate_duration_for_category\" /home/jack/tools/rust/zwift-race-finder/src/*.rs | grep -v main_backup)",
      "Bash(# Find get_route_difficulty_multiplier in new code\ngrep -A 15 \"fn get_route_difficulty_multiplier\" /home/jack/tools/rust/zwift-race-finder/src/duration_estimation.rs || echo \"Not found in duration_estimation.rs\")",
      "Bash(./compare_outputs.sh:*)",
      "Bash(RUSTFLAGS=\"-A warnings\" ./compare_outputs.sh 2 >& 1)",
      "Bash(RUSTFLAGS=\"-A warnings\" cargo build --release --bin zwift-race-finder-backup --quiet)",
      "Bash(RUSTFLAGS=\"-A warnings\" cargo build --release --bin zwift-race-finder --quiet)",
      "Bash(sed:*)",
      "Bash(./test_debug)",
      "Bash(./test_debug_event_type)",
      "Bash(# Extract function definitions and check if they have coverage\ngrep -n \"^fn \\|^impl \\|^pub fn \\|^async fn \" src/main.rs | while IFS=: read -r line_num func_def; do\n    # Get the function name\n    func_name=$(echo \"$func_def\" | sed -E 's/^(pub |async |pub async )?fn ([a-zA-Z0-9_]+).*/\\2/')\n    if [[ ! -z \"$func_name\" && \"$func_name\" != \"fn\" ]]; then\n        # Check if this function appears in the coverage HTML with 0 coverage\n        if grep -q \"L$line_num.*uncovered-line.*$func_name\" target/llvm-cov/html/coverage/home/jack/tools/rust/zwift-race-finder/src/main.rs.html 2>/dev/null; then\n            echo \"Line $line_num: $func_name (0% coverage)\"\n        fi\n    fi\ndone | sort -u)",
      "Bash(# First, let's extract all functions from the source\ngrep -n \"^fn \\|^pub fn \\|^async fn \\|^pub async fn \" src/main.rs | head -20)",
      "Bash(# Search for specific functions in the HTML to check coverage\nfor line in 124 179 217 258 288 321 358 395 432 469 506 543 580 617 654 691 701 752 798 819 1787 1981 2113; do\n    if grep -q \"L$line.*uncovered-line\" target/llvm-cov/html/coverage/home/jack/tools/rust/zwift-race-finder/src/main.rs.html 2>/dev/null; then\n        echo \"Line $line: uncovered\"\n    fi\ndone)",
      "Bash(# Get function names for uncovered lines\nawk 'NR==124 || NR==179 || NR==217 || NR==258 || NR==288 || NR==321 || NR==358 || NR==395 || NR==432 || NR==469 || NR==506 || NR==543 || NR==580 || NR==617 || NR==654 || NR==691 || NR==701 || NR==752 || NR==798 || NR==819 || NR==1787 || NR==1981 || NR==2113' src/main.rs | grep -E \"^(pub |async |pub async )?fn \" | sed -E 's/^(pub |async |pub async )?fn ([a-zA-Z0-9_]+).*/\\2/')",
      "Bash(# Extract all function declarations with line numbers\ngrep -n \"fn \" src/main.rs | grep -E \"^[0-9]+:(pub |async |pub async )?fn [a-zA-Z0-9_]+\" | sed -E 's/^([0-9]+):.*(fn [a-zA-Z0-9_]+).*/\\1:\\2/' | head -50)",
      "Bash(# Check coverage for each function by searching for uncovered lines\nfor line in 124 128 141 188 245 255 279 288 411 421 436 450 462 484 502 527 540 555 563 635 647 656 701 752 767 786 798 819 839 1106 1113 1174 1229 1312 1402 1760 1787 1914 1981 2055 2075 2113; do\n    func_name=$(awk \"NR==$line\" src/main.rs | sed -E 's/.*(fn [a-zA-Z0-9_]+).*/\\1/')\n    if grep -q \"L$line.*uncovered-line\" target/llvm-cov/html/coverage/home/jack/tools/rust/zwift-race-finder/src/main.rs.html 2>/dev/null; then\n        echo \"$func_name (line $line)\"\n    fi\ndone)",
      "Bash(# Search for functions that have any execution count > 0\ngrep -B1 -A5 \"fn [a-zA-Z0-9_]\" target/llvm-cov/html/coverage/home/jack/tools/rust/zwift-race-finder/src/main.rs.html | grep -E \"(covered-line|uncovered-line).*fn \" | grep \"uncovered-line\" | sed -E 's/.*<pre>(.*)<\\/pre>.*/\\1/' | grep -E \"^(pub |async |pub async )?fn \" | sed -E 's/^(pub |async |pub async )?fn ([a-zA-Z0-9_]+).*/\\2/' | sort -u)",
      "Bash(# List all functions and check which ones appear with class='uncovered-line' \n# immediately before the function definition\ncat > /tmp/check_coverage.py << 'EOF'\nimport re\n\n# Read the HTML file\nwith open('target/llvm-cov/html/coverage/home/jack/tools/rust/zwift-race-finder/src/main.rs.html', 'r') as f:\n    content = f.read()\n\n# Find all uncovered function definitions\n# Look for pattern where uncovered-line appears right before a function definition\npattern = r'<td class=\\'uncovered-line\\'><pre>0</pre></td><td class=\\'code\\'><pre>.*?fn (\\w+)'\nmatches = re.findall(pattern, content, re.DOTALL)\n\n# Also look for async functions\nasync_pattern = r'<td class=\\'uncovered-line\\'><pre>0</pre></td><td class=\\'code\\'><pre>.*?async fn (\\w+)'\nasync_matches = re.findall(async_pattern, content, re.DOTALL)\n\n# Combine and deduplicate\nall_functions = set(matches + async_matches)\n\nprint(\"Functions with 0% coverage:\")\nfor func in sorted(all_functions):\n    print(f\"- {func}\")\nEOF\n\npython3 /tmp/check_coverage.py)",
      "Bash(time cargo test --release)",
      "Bash(cargo mutants --version)",
      "WebFetch(domain:nextest.dev)",
      "Bash(RUST_BACKTRACE=1 cargo test test_filter_events_arithmetic_mutations --bin zwift-race-finder -- --nocapture 2 >& 1)",
      "WebFetch(domain:arxiv.org)",
      "WebFetch(domain:www.npmjs.com)",
      "WebFetch(domain:landley.net)",
      "WebFetch(domain:docs.codewars.com)",
      "Bash(diff:*)",
      "Bash(RUSTFLAGS=\"-Awarnings\" cargo run --bin zwift-race-finder -- --help 2 >& 1)",
      "Bash(./target/debug/zwift-race-finder:*)",
      "Bash(RUST_LOG=debug cargo test test_racing_score_event_filtering -- --show-output 2 >& 1)",
      "WebFetch(domain:refactoring.com)",
      "Bash(git pull:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr view:*)",
      "Bash(git branch:*)",
      "Bash(cat:*)",
      "Bash(nproc)",
      "Bash(./check_mutation_progress.sh:*)",
      "Bash(top:*)",
      "Bash(./run_mutation_testing.sh:*)",
      "Bash(fd:*)",
      "WebFetch(domain:mutants.rs)",
      "WebFetch(domain:rust-analyzer.github.io)",
      "WebFetch(domain:rust-unofficial.github.io)",
      "WebFetch(domain:doc.rust-lang.org)",
      "Bash(if [ -f mutation_logs/full_run.log ])",
      "Bash(then echo \"Log file exists, checking content:\")",
      "Bash(else echo \"Log file not found\")",
      "Bash(fi)",
      "Bash(rustup component:*)",
      "WebFetch(domain:docs.rs)",
      "Bash(RUSTFLAGS=\"\" cargo test main_mutation_tests --lib 2>&1)",
      "Bash(RUSTFLAGS=\"\" cargo test --test main_mutation_tests 2 >& 1)",
      "Bash(RUSTFLAGS=\"\" cargo test --release 2 >& 1)",
      "Bash(killall:*)",
      "Bash(tree:*)",
      "Bash(# Move refactoring documentation to development folder\nmv REFACTORING_*.md docs/development/\nmv RUST_REFACTORING_*.md docs/development/\n\n# Move testing documentation to development folder  \nmv TEST_*.md docs/development/\nmv DUPLICATE_TESTS_REPORT.md docs/development/\nmv MUTATION_TESTING_SUMMARY.md docs/development/\n\n# Show what's left in root\nls -la *.md | grep -v README.md | grep -v REQUIREMENTS.md | grep -v CLAUDE.md | grep -v HANDOFF.md)",
      "Bash(# Move development-related docs\nmv MIGRATION_TO_UOM_PLAN.md docs/development/\nmv mutation_analysis.md docs/development/\nmv mutation_mapping.md docs/development/\n\n# Check if todo.md is project-specific or general\nhead -20 todo.md)",
      "Bash(RUST_BACKTRACE=1 cargo test --features uom-migration database::tests::test_race_result_storage -- --nocapture 2 >& 1)",
      "WebFetch(domain:cgit.savannah.gnu.org)",
      "WebFetch(domain:git.savannah.gnu.org)",
      "WebFetch(domain:uutils.github.io)",
      "Bash(git stash:*)",
      "Bash(PROPTEST_CASES=100 cargo test properties_tests --release -- --nocapture)",
      "Bash(PROPTEST_CASES=100 cargo test behavioral_invariants --release -- --nocapture)",
      "Bash(PROPTEST_CASES=100 cargo test behavioral_invariants --release 2 >& 1)",
      "Bash(./tools/utils/validate_test_data.sh:*)",
      "Bash(mask debug:*)",
      "Bash(uv add:*)",
      "Bash(dpkg:*)",
      "Bash(apt-cache policy:*)",
      "Bash(./install_ocr_deps.sh:*)",
      "Bash(pkg-config:*)",
      "Bash(RUST_LOG=error cargo run --features ocr --bin zwift_ocr --quiet -- /home/jack/tools/rust/zwift-race-finder/docs/screenshots/normal_1_01_16_02_21.jpg --format json)",
      "Bash(mask compare:*)",
      "Bash(./target/debug/zwift_ocr:*)",
      "Bash(RUST_LOG=debug ./target/debug/zwift_ocr --backend ocrs docs/screenshots/normal_1_01_16_02_21.jpg 2 >& 1)",
      "Bash(pip3 install:*)",
      "Bash(export OCRS_MODEL_PATH=$PWD/ocrs-models)",
      "Bash(./compare_ocr_compact.py)",
      "Bash(gh auth:*)",
      "Bash(RUST_LOG=error cargo run --features ocr --bin zwift_ocr_ocrs -- docs/screenshots/normal_1_01_16_02_21.jpg 2 >& 1)",
      "Bash(OCRS_MODEL_DIR=~/.cache/ocrs ./target/debug/zwift_ocr_ocrs docs/screenshots/normal_1_01_16_02_21.jpg 2 >& 1)",
      "Bash(~/.cargo/bin/ocrs:*)",
      "Bash(RUST_LOG=debug ./target/debug/zwift_ocr_ocrs docs/screenshots/normal_1_01_16_02_21.jpg 2 >& 1)",
      "Bash(time:*)",
      "Bash(./target/release/zwift_ocr_compact docs/screenshots/normal_1_01_16_02_21.jpg)",
      "Bash(command -v:*)",
      "Bash(uvx:*)",
      "Bash(./target/release/zwift_ocr_compact:*)",
      "Bash(DEBUG_OCR=1 ./target/release/zwift_ocr_compact docs/screenshots/normal_1_01_16_02_21.jpg 2 >& 1)",
      "Bash(DEBUG_OCR=1 ./target/release/zwift_ocr_compact docs/screenshots/normal_1_01_16_02_21.jpg)",
      "Bash(./test_parse_time)",
      "Bash(./target/release/zwift_ocr_benchmark docs/screenshots/normal_1_01_16_02_21.jpg)",
      "Bash(./target/release/zwift_ocr_benchmark:*)",
      "Bash(./test_wkg_parse)",
      "Bash(INSTA_UPDATE=new cargo test --features ocr --test ocr_snapshot_tests 2 >& 1)",
      "Bash(RUST_BACKTRACE=1 cargo test --features ocr fuzz_tests::fuzz_leaderboard_numeric_combinations -- --exact --nocapture 2 >& 1)",
      "Bash(git tag:*)",
      "Bash(./run_ocr_mutation_testing.sh:*)",
      "Bash(uv pip list:*)",
      "Bash(pkill:*)",
      "Bash(git rm:*)",
      "Bash(git -C /home/jack/tools add LICENSE-APACHE LICENSE-MIT)",
      "Bash(git -C /home/jack/tools status)",
      "Bash(git -C /home/jack/tools commit -m \"chore: add dual MIT/Apache-2.0 licenses\n\nCopy license files from zwift-race-finder project to establish\nconsistent licensing across the tools repository.\")",
      "Bash(git -C /home/jack/tools add COPYRIGHT)",
      "Bash(git -C /home/jack/tools commit -m \"chore: add COPYRIGHT file for dual licensing clarity\n\nFollowing Rust project convention, add explicit COPYRIGHT file that:\n- Clearly states dual MIT/Apache-2.0 licensing\n- Clarifies copyright retention by contributors\n- Provides both short and long explanations\n- References the LICENSE files for full terms\")",
      "Bash(git -C /home/jack/tools log --oneline -10)",
      "Bash(git -C /home/jack/tools status --short)",
      "Bash(git -C /home/jack/tools add HANDOFF.md PROJECT_WISDOM.md sessions/ .claude/settings.local.json)",
      "Bash(git -C /home/jack/tools add HANDOFF.md PROJECT_WISDOM.md sessions/)",
      "Bash(git -C /home/jack/tools check-ignore .claude/settings.local.json)",
      "Bash(git config:*)",
      "Bash(git -C /home/jack/tools add .gitignore .claude/settings.local.json)",
      "Bash(git -C /home/jack/tools commit -m \"fix: update .gitignore to include .claude/settings.local.json\n\nThe .claude/settings.local.json file contains tool permissions and should\nbe tracked in version control to maintain consistent Claude behavior across\ndevelopment sessions.\")",
      "Bash(git check-ignore:*)",
      "Bash(git -C /home/jack/tools/rust/zwift-race-finder log --oneline --follow CLAUDE.md)",
      "Bash(git -C /home/jack/tools/rust/zwift-race-finder show 4ca1741:CLAUDE.md)",
      "Bash(git -C /home/jack/tools/rust/zwift-race-finder log --oneline --grep=\"CLAUDE.md\" --grep=\"refactor\" --grep=\"docs\" -i)",
      "Bash(git -C /home/jack/tools/rust/zwift-race-finder show --stat 4ca1741)",
      "Bash(./tools/ocr/run_ocr_mutation_test.sh:*)",
      "Bash(test:*)",
      "Bash(du:*)",
      "Bash(git diff:*)",
      "Bash(git show:*)",
      "Bash(wc:*)",
      "Bash(uv pip install:*)",
      "WebFetch(domain:console.groq.com)",
      "Bash(RUSTFLAGS=\"-A warnings\" cargo run --features ocr --bin zwift_ocr_compact -- /mnt/c/Users/jackc/Videos/Recordings/2025-06-10_16-32-20/frame_000100.png --format text 2>&1)",
      "Bash(./target/debug/test_ocr:*)",
      "Bash(./target/release/test_ocr:*)",
      "Bash(cd /home/jack/tools/rust/zwift-race-finder/tools/ocr)",
      "Bash(uv run python -c \"\nimport json\nwith open(''ocr-configs/1920x1080_v1.67.0_auto.json'', ''r'') as f:\n    config = json.load(f)\n    \nprint(''Auto-detected regions:'')\nfor name, region in config[''regions''].items():\n    if name not in [''leaderboard'', ''rider_pose_avatar'']:\n        print(f''{name:20} at ({region[\"\"x\"\"]:4}, {region[\"\"y\"\"]:4}) size {region[\"\"width\"\"]:3}x{region[\"\"height\"\"]:2} - {region.get(\"\"note\"\", \"\"\"\")}'')\n\")",
      "Bash(./target/release/debug_ocr:*)",
      "Bash(podman build:*)",
      "Bash(podman images:*)",
      "Bash(podman run:*)",
      "Bash(podman rm:*)",
      "Bash(podman ps:*)",
      "Bash(podman logs:*)",
      "Bash(wslpath:*)",
      "Bash(docker search:*)",
      "Bash(sudo hcitool:*)",
      "Bash(./target/release/import_zwift_offline_routes:*)",
      "Bash(RUST_BACKTRACE=1 cargo run --bin import_zwift_offline_routes -- --input-dir data/zwift_offline_export --dry-run 2 >& 1)",
      "Bash(./scripts/import_from_zwift_offline.sh:*)",
      "WebFetch(domain:zwiftinsider.com)",
      "WebFetch(domain:gitlab.com)",
      "Bash(./tools/import/strava/strava_fetch_activities.sh:*)",
      "Bash(./tools/import/strava/strava_import_to_db.sh:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}